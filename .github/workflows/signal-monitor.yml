name: NIFTY Signal Monitor

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Run outside market hours'
        type: boolean
        required: false
        default: false
  
  # Schedule to start at market open (9:00 AM IST = 3:30 AM UTC)
  schedule:
    - cron: '30 3 * * 1-5'  # Monday to Friday at 9:00 AM IST

jobs:
  signal-monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 420  # 7 hours (9 AM to 4 PM)
    
    # Continue on error to ensure logs are uploaded
    continue-on-error: true
    
    # Set timezone to IST
    env:
      TZ: Asia/Kolkata
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate secrets
      run: |
        if [ -z "${{ secrets.UPSTOX_ACCESS_TOKEN }}" ]; then
          echo "❌ Error: UPSTOX_ACCESS_TOKEN secret is not set!"
          echo "Please add it in: Settings → Secrets and variables → Actions"
          exit 1
        fi
        echo "✅ UPSTOX_ACCESS_TOKEN is configured"
    
    - name: Create .env file from secrets
      env:
        UPSTOX_ACCESS_TOKEN: ${{ secrets.UPSTOX_ACCESS_TOKEN }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        # Create .env file with secrets and configuration
        cat > .env << EOF
        # API Configuration
        UPSTOX_ACCESS_TOKEN=$UPSTOX_ACCESS_TOKEN
        DISCORD_WEBHOOK_URL=$DISCORD_WEBHOOK_URL
        
        # GitHub Actions specific settings
        FORCE_RUN=${{ github.event.inputs.force_run || vars.FORCE_RUN || 'false' }}
        LOG_LEVEL=${{ vars.LOG_LEVEL || 'INFO' }}
        LOG_TO_FILE=true
        COLORFUL_LOGS=false
        CLEAR_SCREEN=false
        
        # Trading Parameters
        MIN_SIGNAL_STRENGTH=${{ vars.MIN_SIGNAL_STRENGTH || '65' }}
        SIGNAL_COOLDOWN=${{ vars.SIGNAL_COOLDOWN || '300' }}
        MIN_TICK_WARMUP=${{ vars.MIN_TICK_WARMUP || '100' }}
        MAX_SIGNALS_PER_DAY=${{ vars.MAX_SIGNALS_PER_DAY || '10' }}
        
        # Technical Indicators
        RSI_PERIOD=${{ vars.RSI_PERIOD || '14' }}
        VWAP_SENSITIVITY=${{ vars.VWAP_SENSITIVITY || '0.001' }}
        VOLATILITY_WINDOW=${{ vars.VOLATILITY_WINDOW || '20' }}
        SUPERTREND_PERIOD=${{ vars.SUPERTREND_PERIOD || '10' }}
        SUPERTREND_MULTIPLIER=${{ vars.SUPERTREND_MULTIPLIER || '3.0' }}
        
        # Risk Parameters
        MAX_VOLATILITY=${{ vars.MAX_VOLATILITY || '0.35' }}
        MIN_LIQUIDITY_SCORE=${{ vars.MIN_LIQUIDITY_SCORE || '60' }}
        
        # Market Hours
        MARKET_OPEN_HOUR=${{ vars.MARKET_OPEN_HOUR || '9' }}
        MARKET_OPEN_MINUTE=${{ vars.MARKET_OPEN_MINUTE || '15' }}
        MARKET_CLOSE_HOUR=${{ vars.MARKET_CLOSE_HOUR || '16' }}
        MARKET_CLOSE_MINUTE=${{ vars.MARKET_CLOSE_MINUTE || '0' }}
        
        # Display Settings
        UPDATE_FREQUENCY=${{ vars.UPDATE_FREQUENCY || '0.5' }}
        SHOW_INDICATORS=${{ vars.SHOW_INDICATORS || 'true' }}
        
        # Alert Settings
        SOUND_ALERTS=false
        DESKTOP_NOTIFICATIONS=false
        
        # Debug Settings
        DEBUG_MODE=${{ vars.DEBUG_MODE || 'false' }}
        SAVE_TICK_DATA=${{ vars.SAVE_TICK_DATA || 'false' }}
        EOF
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Run NIFTY Signal Monitor
      id: monitor
      run: |
        echo "🚀 Starting NIFTY Signal Monitor"
        echo "⏰ Current time: $(date)"
        echo "📊 Market hours: 9:15 AM - 4:00 PM IST"
        echo "⚡ The script will run continuously until market close"
        echo ""
        
        # Run the signal monitor
        # The script handles its own timing and will exit at 4 PM IST
        python nifty_signal_system.py
        
        # Capture exit code
        EXIT_CODE=$?
        
        echo ""
        echo "✅ Market session ended with exit code: $EXIT_CODE"
        
        # Check if any signals were generated
        if [ -d "logs" ] && [ -n "$(ls -A logs 2>/dev/null)" ]; then
          echo "📊 Log files generated"
        fi
        
        exit $EXIT_CODE
    
    - name: Check for signals
      if: always()
      run: |
        # Look for signal alerts in logs
        if [ -d "logs" ]; then
          echo "📋 Checking for signals in log files..."
          grep -h "SIGNAL" logs/*.log 2>/dev/null || echo "No signals found in logs"
        fi
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: signal-logs-${{ github.run_number }}-${{ github.run_attempt }}
        path: |
          logs/
          *.log
        if-no-files-found: warn
        retention-days: 7
    
    - name: Upload tick data
      if: always() && vars.SAVE_TICK_DATA == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: tick-data-${{ github.run_number }}-${{ github.run_attempt }}
        path: |
          tick_data/
          *.csv
        if-no-files-found: ignore
        retention-days: 3
    
    - name: Send completion notification
      if: always()
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          # Determine status and color
          if [ "${{ job.status }}" == "success" ]; then
            STATUS_EMOJI="✅"
            COLOR=3066993
            STATUS_MSG="completed successfully"
          elif [ "${{ job.status }}" == "failure" ]; then
            STATUS_EMOJI="❌"
            COLOR=15158332
            STATUS_MSG="failed"
          else
            STATUS_EMOJI="⚠️"
            COLOR=16776960
            STATUS_MSG="completed with warnings"
          fi
          
          curl -X POST $DISCORD_WEBHOOK_URL \
            -H "Content-Type: application/json" \
            -d '{
              "content": "'$STATUS_EMOJI' NIFTY Signal Monitor '$STATUS_MSG'",
              "embeds": [{
                "title": "Workflow Summary",
                "color": '$COLOR',
                "fields": [
                  {"name": "Status", "value": "'${{ job.status }}'", "inline": true},
                  {"name": "Run Number", "value": "'${{ github.run_number }}'", "inline": true},
                  {"name": "Repository", "value": "'${{ github.repository }}'", "inline": true},
                  {"name": "Duration", "value": "'${{ steps.monitor.outcome }}'", "inline": true},
                  {"name": "Triggered By", "value": "'${{ github.event_name }}'", "inline": true}
                ],
                "footer": {
                  "text": "View logs in GitHub Actions"
                },
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }'
        fi
    
    - name: Create summary
      if: always()
      run: |
        # Create job summary
        echo "## 📊 NIFTY Signal Monitor Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Start Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Run Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered By**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "logs" ] && [ -n "$(ls -A logs 2>/dev/null)" ]; then
          echo "### 📋 Signals Generated" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          grep -h "SIGNAL\|Signal" logs/*.log 2>/dev/null | head -20 || echo "No signals found"
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "### 📋 No log files generated" >> $GITHUB_STEP_SUMMARY
        fi